{% extends "layout.html.twig" %}

{% block css %}
<link rel="stylesheet" href="/css/font-awesome-animation.min.css" />
<link rel="stylesheet" href="/css/bootstrap-datepicker.min.css">
{% endblock %}

{% block content %}
<div class="row">
  <div class="col-xs-12 col-sm-8 col-md-8 col-lg-10">
    <div class="box">
      <div class="box-body">
          <div id="graph_display" style="width: 100%;height: 800px; display: block;"></div>
      </div>
    </div>
  </div>
  <div class="col-xs-12 col-sm-4 col-md-4 col-lg-2">
    <div id="#nodeInfo" class="box box-success box-solid">
      <div class="box-header">
        <h4 data-node="false">Information</h4>
        <div class="box-tools pull-right">
          <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i></button>
        </div>
      </div>
      <div class="box-body">
        <div id="no_selected" class="row" style="text-align:center">
            <p><i class="fa fa-hand-o-left faa-horizontal animated fa-3x"></i></p>
            <p><span class="text-lead">Select a node or a link in order to display information about it.</span></p>
        </div>
        <div class="row">
          <div id="nodes" style="width:100%;margin:1px;padding:3px;">
          </div>
        </div>
      </div>
    </div>
    {% include 'widgets/version_selector.html.twig' %}
  </div>
</div>
{% endblock %}

{% block javascripts %}

<script src="/js/cytoscape.js"></script>
<script>

  $(document).ready(function(){
    versionSearchByDate();
    onSelectVersionHandler(function(version){
      loadGraphData(version,renderGraph)
    });
    // selectVersion($('#version_select'),function(version) {
    //   loadGraphData(version,renderGraph)
    // });
  });

  /**
  * Loads the graph data via ajax
  * @param {String} param The search param
  * @param {Function} callback The callback function
  */
  var loadGraphData=function(param,callback){
    $.get('/flow-map/graph').done(function(data){
      $("#nodes").children().remove();
      callback(data);
    }).fail(function(jxqr){
      if(xhr.status === 400){
        errorMessageNotification('Please provide a version in order to render the graph.');
      } else {
        errorMessageNotification('Could not fetch the graph data please try again later.');
      }
    }).always(function(){
      console.log("Ajax finished");
    });
  }

  var renderGraph=function(data) {
    var config = {
      container: document.getElementById('graph_display'),
      elements:{
        nodes:[],
        edges:[]
      },
      layout: {
        name: 'breadthfirst',
        padding: 100
      },
      ready: function(){
        window.cy = this;
      }
    }

    config.style=cytoscape.stylesheet()
      .selector('node')
      .css({
        'background-color':'data(color)',
        'shape':'data(favshape)',
        'width':'150px',
        'text-valign': 'center',
        'content':'data(name)',
        'text-valign': 'center',
        'color':'#181A1F',
        'text-outline-color': '#181A1F',
      }).selector('edge')
      .css({
        'line-color': '#000000',
        'content':'data(type)',
        'color': '#F00FF0'
      });

    data.nodes.forEach(function(item,index){
      var appendItem={
        id:item.id,
        type: item.type,
        properties:item.properties
      };

      //Defining the name and display properties
      if(item.properties.name){
        appendItem.name=item.properties.name;
      }
      switch(item.type){
        case 'DATA_ASSET':
          appendItem.color="#8355a3";
          appendItem.favshape="rectangle";
          appendItem.name=item.properties.asset_name;
          break;
        case 'DATA_CONSUMER':
          appendItem.name=item.properties.usedBy;
          appendItem.color="#BE9791";
          appendItem.favshape="rectangle";
          break;
        case 'PROSESED':
          appendItem.favshape="hexagon";
          appendItem.name=item.properties.type;
          if(item.properties.type.toLower==='transmission'){
            appendItem.color="#0a581b";
          } else {
            appendItem.color="#50BB7C";
          }
          break;
        case 'SERVER_OR_SERVICE':
          appendItem.favshape="barrel";
          appendItem.color="#990000";
          break;
        default:
          appendItem.favshape="ellipse";
          appendItem.color="#F1F1F1"
      }
      config.elements.nodes.push({data:appendItem});
    })

    data.edges.forEach(function(item,index){
      var dataItem=item;
      dataItem.id=100*item.id;//Ensuring that the esges will have a unique id
      config.elements.edges.push({data:dataItem});
    });

    var cy=cytoscape(config);

    cy.on('tap',function(event){
      var evtTarget = event.target;

      if( evtTarget === cy ){
        console.log('tap on background');
        $("#nodes").hide();
        $("#no_selected").show();
      } else {
        console.log("Display Info")
        displayInfo(evtTarget._private.data.properties);
      }
    }).on('mouseover','node',function(event){
      var evtTarget = event.target;
      if( evtTarget !== cy ){
        console.log("Mouse Over");
        evtTarget.style('border-width','2px').style('border-color',"#AF0000");
      }
    }).on('mouseout','node',function(event){
      var evtTarget = event.target;
      if( evtTarget !== cy ){
        console.log("Fired");
        evtTarget.style('border-width','0px').style('border-color',null);
      }
    }).on('mouseover','edge',function(event){
      var evtTarget = event.target;
      if( evtTarget !== cy ){
        console.log("Mouse Over");
        evtTarget.style('line-color','#AF0000');
      }
    }).on('mouseout','edge',function(event){
      var evtTarget = event.target;
      if( evtTarget !== cy ){
        console.log("Fired");
        evtTarget.style('line-color','#000000');
      }
    });
  }

  var displayInfo=function(info){

    $("#nodes").children().remove();
    $("#nodes").hide();
    $("#no_selected").show();

    if(info && info.labels) {
      var labels=JSON.parse(info.labels);
      var elem=$(document.createElement('dl'));

      Object.keys(labels).forEach(function(item,index){
        console.log(labels[item],info[item]);
        var labelElem=$(document.createElement('dt')).text(labels[item]);
        var valueElem=$(document.createElement('dd')).text(info[item]);
        elem.append(labelElem).append(valueElem);
      });

      $('#nodes').append(elem);
      $('#nodes').show();
      $('#no_selected').hide();
    }

  }
</script>
{% endblock %}
